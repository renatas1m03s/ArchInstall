#!/usr/bin/env python3

import sys
import os
import blessed
import subprocess
import socket
import getpass
import time

### My Modules
lib_path = os.path.abspath(os.path.join(os.path.dirname(__file__), './modules')) # Define absolut path to custom modules

sys.path.append(lib_path)

# text_justify_center, text_justify_left, text_justify_left_middle, text_print_list, resolve_uw_display, text_set_printable_area
from texts import *

# choices_horizontal_menu, choices_single_option, choices_multiple_options
from choices import * 

###############################################################################

### "CONSTANTS and Global Variables"

YES_OR_NO = ['Yes','No']

PROCEED_OR_ABORT = ['Proceed','Abort']

PROGRAM_TITLE = 'Arch Linux Install Wizard - v0.11' 

WELCOME_TEXT = ['Welcome to Arch Install Wizard.',
				' ',
				'We have two distinct moments on this tool:',
				'1 - Non destructive - Define setup options: disk, user, regional settings, packages...',
				'2 - Destructive - Format partions and install system.',
				' ',]

SYSTEM_CHOICES = ['Generic - Custom install, no default options.',
				  'Sagittarius - Desktop PC, AMD CPU and  GPU.',
				  'Phoenix - Laptop, Intel CPU and NVIDIA GPU.',
				  'Rubik - ASUS Rog Ally handheld.',
				  'Linuxtest - QEMU VM.',
				  'Details - Print info about every option.']
				  
DISK_SETUP_WELCOME = 'Moment 1 - Non destructive - Define disk options'

DISK_OPTIONS = ['EFI,Boot,Root and Home topology. Format EFI, Boot and Root (preserv Home).',
				'EFI,Boot,Root and Home topology. Format Boot and Root (preserv EFI and Home).',
				'EFI,Boot,Root and Home topology.Format EFI, Boot, Root and Home.',
				'Erase disk and create/format EFI (512MiB) and Root partition using entire disk.']

DISK_OPTIONS3 = ['Format/Mount partition 1 as EFI (FAT32)?',
				 'Format/Mount partition 2 as Root (EXT4)?',
				 'Format/Mount partition 3 as Home (EXT4)?',
				 'Erase disk and create/format EFI (512MiB) and Root partition using entire disk.']

DISK_OPTIONS4 = ['Format/Mount partition 1 as EFI (FAT32)?',
				 'Format/Mount partition 2 as Boot (EXT4)?',
				 'Format/Mount partition 3 as Root (EXT4)?',
				 'Format/Mount partition 4 as Home (EXT4)?',
				 'Erase disk and create/format EFI (512MiB) and Root partition using entire disk.']

PATH = os.path.dirname(__file__)+'/'

SYSTEM_OPTIONS = ['LTS Kernel',
                  'ZEN Kernel',
                  'Mesa combo - For systems with GPUs/iGPUS AMD or Intel',
                  'NVidia combo - For systems with GPUs NVidia',
                  'GNOME Basic - Minimal options - file manager, terminal, tweaks...',
                  'Plasma/KDE Basic -  Minimal options - file manager, terminal...',
                  'Internet Browser - CHROMIUM',
                  'Internet Browser - Firefox browser',
                  'Email Client - Thunderbird',                
                  'Office Suite - Libreoffice',
                  'Video Player - VLC',
                  'Text Editor - Geany and plugins',
                  'System Monitor - Conky',
                  'Usefull extras - p7zip, btop and yt-dlp']

def initial_args(argv):
	global USERNAME, DISPLAY_USERNAME, HOSTNAME, TIME_ZONE, KEYBOARD_CONFIG, LANG, SYSTEM, SYSTEM_OPTION

	KNOW_SYSTEMS = ['sagittarius','phoenix','rubik','linuxtest']

	if len(sys.argv) > 1:
		SYSTEM = sys.argv[1].lower().replace('\n','')
		if SYSTEM in KNOW_SYSTEMS:
			if SYSTEM == 'sagittarius':
				USERNAME = 'renata'
				DISPLAY_USERNAME = 'Renata Maria'
				HOSTNAME = SYSTEM
				LANG = '\'en_US.UTF-8\''
				TIME_ZONE = 'America/Fortaleza'
				KEYBOARD_CONFIG = 'us-acentos'
				SYSTEM_OPTION = SYSTEM_CHOICES[1]
			if SYSTEM == 'phoenix':
				USERNAME = 'renata'
				DISPLAY_USERNAME = 'Renata Maria'
				HOSTNAME = SYSTEM
				LANG = '\'en_US.UTF-8\''
				TIME_ZONE = 'America/Fortaleza'
				KEYBOARD_CONFIG = 'br-abnt2'
				SYSTEM_OPTION = SYSTEM_CHOICES[2]
			if SYSTEM == 'rubik':
				USERNAME = 'renata'
				DISPLAY_USERNAME = 'Renata Maria'
				HOSTNAME = SYSTEM
				LANG = '\'en_US.UTF-8\''
				TIME_ZONE = 'America/Fortaleza'
				KEYBOARD_CONFIG = 'br-abnt2'
				SYSTEM_OPTION = SYSTEM_CHOICES[3]
			if SYSTEM == 'linuxtest':
				USERNAME = 'renata'
				DISPLAY_USERNAME = 'Renata Maria'
				HOSTNAME = SYSTEM
				LANG = '\'en_US.UTF-8\''
				TIME_ZONE = 'America/Fortaleza'
				KEYBOARD_CONFIG = 'us-acentos'
				SYSTEM_OPTION = SYSTEM_CHOICES[4]
		else:
			SYSTEM = 'generic'
			USERNAME = 'jane'
			DISPLAY_USERNAME = 'Jane Doe'
			HOSTNAME = SYSTEM
			LANG = 'en_US.UTF-8'
			TIME_ZONE = 'Etc/GMT0'
			KEYBOARD_CONFIG = 'us-acentos'
			SYSTEM_OPTION = SYSTEM_CHOICES[0]
	else:
		SYSTEM = 'generic'
		USERNAME = 'jane'
		DISPLAY_USERNAME = 'Jane Doe'
		HOSTNAME = SYSTEM
		LANG = 'en_US.UTF-8'
		TIME_ZONE = 'Etc/GMT0'
		KEYBOARD_CONFIG = 'us-acentos'
		SYSTEM_OPTION = SYSTEM_CHOICES[0]
		
def permanent_title(term, program_title): # Defines a header with three lines

	position=list((0,0))
	program_title = text_justify_center(term, position, program_title)
	position[0]+=1
	navigation = text_justify_center(term, position, 'Use arrows, ENTER and ESC to navigate and CTRL+C to abort')
	print(term.clear())
	sys.stdout.write(term.move(0, 0))
	sys.stdout.write(term.bold(term.gray_on_blue(program_title)))
	sys.stdout.write(term.bold(term.blue_on_gray(navigation)))
	sys.stdout.write(term.csr(3, term.height))
	sys.stdout.write(term.move(3, 0))
	
	pass

def sysinfo(term, position):
	global VDA, SDA, NVME0N1, MEM, IMAGE_ID
	
	VDA = SDA = NVME0N1 = IMAGE_ID = False
	
	position2 = position3 = list((int(0),int(0)))
		
	position[0]+=1
	y = position[0]
	
	cpu = subprocess.run(['sh','-c','cat /proc/cpuinfo | grep -m 1 -i "model name" | awk -F: \'{print $2}\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	print(text_justify_left(term, position,'CPU:'+cpu.stdout.decode('utf-8').replace('\n','')))
	position[0]+=1

	mem = subprocess.run(['sh','-c','cat /proc/meminfo | grep -i "memtotal" | awk \'{print $2}\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	print(text_justify_left(term, position,'RAM: '+mem.stdout.decode('utf-8').replace('\n','')+' KiB'))
	MEM = mem.stdout.decode('utf-8').replace('\n','')+'K'
	position[0]+=2

	print(text_justify_left(term, position,'Storage topology:'))
	position = resolve_uw_display(term)
	lsblk = subprocess.run(['sh','-c','fdisk -o Device,Size,Type -l | grep -i /dev/ | grep -v -i sectors'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	lsbblk_lines = lsblk.stdout.decode('utf-8').splitlines()
	for idx, lines in enumerate(lsbblk_lines):
		print(text_justify_left(term, position,lines))
		if lines.find('/dev/sda')!=-1:
			SDA = True
		if lines.find('/dev/nvme0n1')!=-1:
			NVME0N1 = True
		if lines.find('/dev/vda')!=-1:
			VDA = True
		position[0]+=1
	if NVME0N1 and SDA:
		SDA = False

	if not SDA and not NVME0N1 and not VDA:
		lsblk = subprocess.run(['sh','-c','fdisk -l | grep -i \'disk /dev\' | awk \'{print $1" "$2" "$3" "$4}\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		lsbblk_lines = lsblk.stdout.decode('utf-8').splitlines()
		for idx, lines in enumerate(lsbblk_lines):
			print(text_justify_left(term, position,lines))
			if lines.find('/dev/sda')!=-1:
				SDA = True
			if lines.find('/dev/nvme0n1')!=-1:
				NVME0N1 = True
			if lines.find('/dev/vda')!=-1:
				VDA = True
			position[0]+=1
		if NVME0N1 and SDA:
			SDA = False
	
	position2 = resolve_uw_display(term)
	position2[0] += 1
	
	position[0] = y
	hostname = socket.gethostname()
	IPAddr = socket.gethostbyname(hostname)
	print(text_justify_left_middle(term, position, "IP Address: "+IPAddr))
	position[0]+=2
	
	print(text_justify_left_middle(term, position, "Time and Date settings:"))
	position = resolve_uw_display(term)
	timedate = subprocess.run(['sh','-c','timedatectl show'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	timedate_lines = timedate.stdout.decode('utf-8').splitlines()
	idx=0
	for idx, lines in enumerate(timedate_lines):
		print(text_justify_left_middle(term, position, lines))
		position[0]+=1

	position = resolve_uw_display(term)
	arch_id = subprocess.run(['sh','-c','cat /etc/os-release | grep -i image_id | awk -F\'=\' \'{print $2}\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	image_id = arch_id.stdout.decode('utf-8').replace('\n','')
	if  image_id == 'archlinux':
		arch_version = subprocess.run(['sh','-c','cat /etc/os-release | grep -i image_version | awk -F\'=\' \'{print $2}\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
		print(text_justify_left_middle(term, position, 'Image: ' + image_id))
		position[0]+=1
		print(text_justify_left_middle(term, position, 'Image Version: ' + arch_version.stdout.decode('utf-8').replace('\n','')))
		IMAGE_ID = True
	else:
		print(text_justify_left_middle(term, position, 'THIS IS NOT A ARCHLINUX LIVE SYSTEM'))
	
	position3 = resolve_uw_display(term)
	if position2[0] >= position3[0]:
		return position2
	else:
		return position3
		
def choose_disk(term, position):
	global SYSTEMDISK
	close_loop = True
	
	lsblk = subprocess.run(['sh','-c','fdisk -o Device,Size,Type -l | grep -i \'disk /dev\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	lsbblk_lines = lsblk.stdout.decode('utf-8').splitlines()
	position = resolve_uw_display(term)
	preserv_position = list((position[0],position[1]))
	while close_loop:
		disk_in_the_system = False
		while disk_in_the_system == False:
			position[0] = preserv_position[0]
			position[1] = preserv_position[1]
			SYSTEMDISK = input(term.move_yx(position[0], position[1])+'Enter system disk (Ex. /dev/nvme1n1): '+term.clear_eos())
			if SYSTEMDISK.find('/dev/')==-1 and len(SYSTEMDISK) >=2:
				SYSTEMDISK = '/dev/'+SYSTEMDISK
			for idx, lines in enumerate(lsbblk_lines):
				position[0] = preserv_position[0]+1
				position[1] = preserv_position[1]
				if lines.find(SYSTEMDISK)!=-1 and len(SYSTEMDISK) >=2:
					disk_in_the_system = True
					text = text_justify_left(term, position, 'Accept \''+term.bold(SYSTEMDISK)+'\' as the system disk?')
					print(text)
					position[1] = position[1]+term.length(text)+2
					select_item=choices_horizontal_menu(term, position,YES_OR_NO)
					if select_item==YES_OR_NO[0]:
						close_loop = False

def set_sagittarius_fstab():

	MNTDATA_BOOLEAN = False
	MNTSTEAM1_BOOLEAN = False
	MNTSTEAM2_BOOLEAN = False
	MNTRETRO_BOOLEAN = False
	MNTBACKUP_BOOLEAN = False
	MNTMULTIMEDIA_BOOLEAN = False
	FSTABFILE = '/mnt/etc/fstab'
	FSTAB_EXTRA = 'assets/fstab-extra.dat'
	
	lsblk = subprocess.run(['sh','-c','blkid'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	lsbblk_lines = lsblk.stdout.decode('utf-8').splitlines()

	try:
		with open(PATH+FSTAB_EXTRA) as file:
			for line in file:
				line_row = line.split(',')
				if line_row[0] == 'Data':
					MNTDATA_ID = line_row[1].replace('\n','')
				if line_row[0] == 'Steam1':
					MNTSTEAM1_ID = line_row[1].replace('\n','')
				if line_row[0] == 'Steam2':
					MNTSTEAM2_ID = line_row[1].replace('\n','')
				if line_row[0] == 'Retro':
					MNTRETRO_ID = line_row[1].replace('\n','')
				if line_row[0] == 'Backup':
					MNTBACKUP_ID = line_row[1].replace('\n','')
				if line_row[0] == 'Multimedia':
					MNTMULTIMEDIA_ID = line_row[1].replace('\n','')
		for idx1, lines1 in enumerate(lsbblk_lines):
			print(lines1)
			if lines1.find(MNTDATA_ID)!=-1:        # /mnt/Data
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTDATA_ID)!=-1:
							MNTDATA_BOOLEAN = True
				if MNTDATA_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# Data\nUUID=' + MNTDATA_ID + '       /mnt/Data        ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
			if lines1.find(MNTSTEAM1_ID)!=-1:      # /mnt/SteamGames1
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTSTEAM1_ID)!=-1:
							MNTSTEAM1_BOOLEAN = True
				if MNTSTEAM1_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# SteamGames1\nUUID=' + MNTSTEAM1_ID + '       /mnt/SteamGames1 ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
			if lines1.find(MNTSTEAM2_ID)!=-1:      # /mnt/SteamGames2
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTSTEAM2_ID)!=-1:
							MNTSTEAM2_BOOLEAN = True
				if MNTSTEAM2_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# SteamGames2\nUUID=' + MNTSTEAM2_ID + '       /mnt/SteamGames2 ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
			if lines1.find(MNTRETRO_ID)!=-1:       # /mnt/RetroGames
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTRETRO_ID)!=-1:
							MNTRETRO_BOOLEAN = True
				if MNTRETRO_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# RetroGames\nUUID=' + MNTRETRO_ID + '       /mnt/RetroGames  ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
			if lines1.find(MNTBACKUP_ID)!=-1:      # /mnt/Backup
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTBACKUP_ID)!=-1:
							MNTBACKUP_BOOLEAN = True
				if MNTBACKUP_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# Backup\nUUID=' + MNTBACKUP_ID + '       /mnt/Backup      ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
			if lines1.find(MNTMULTIMEDIA_ID)!=-1:  # /mnt/Multimedia
				with open(FSTABFILE) as FSTAB:
					FSTAB_file = FSTAB.read()
					for idx2, lines2 in enumerate(FSTAB_file.splitlines()):
						if lines2.find(MNTMULTIMEDIA_ID)!=-1:
							MNTMULTIMEDIA_BOOLEAN = True
				if MNTMULTIMEDIA_BOOLEAN == False:
					with open(FSTABFILE,'a') as FSTAB:
						FSTAB.write('\n# Multimedia\nUUID=' + MNTMULTIMEDIA_ID + '       /mnt/Multimedia  ext4           nosuid,nodev,nofail,x-gvfs-show 0 0\n')
		return True
	except Exception:
		return False

def enumerate_partitions(term):
	lsblk = subprocess.run(['sh','-c','fdisk -o Device,Size,Type -l | grep -iv \'disk \' | grep \'/dev\''], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	lsbblk_lines = lsblk.stdout.decode('utf-8').splitlines()	
	partitions = 0
	for idx, lines in enumerate(lsbblk_lines):
		if lines.find(SYSTEMDISK) !=-1:
			partitions+=1
	position = resolve_uw_display(term)
	print(term.move_yx(position[0], position[1]) + 'Found ' + str(partitions) + ' partitions on ' + SYSTEMDISK)
	match partitions:
		case 0:
			print(term.move_yx(position[0]+1, position[1]) + 'Setup system to use entire disk - Two partitions EFI/Root.')
		case 1:
			print(term.move_yx(position[0]+1, position[1]) + 'Setup system to use entire disk - Two partitions EFI/Root.')
		case 2:
			print(term.move_yx(position[0]+1, position[1]) + 'Setup system to use entire disk - Two partitions EFI/Root.')
		case 3:
			print(term.move_yx(position[0]+1, position[1]) + 'Assuming part1=EFI, part2=Root and part3=Home')
		case 4:
			print(term.move_yx(position[0]+1, position[1]) + 'Assuming part1=EFI, part2=Boot, part3=Root and part4=Home')
		case _:
			print(term.move_yx(position[0]+1, position[1]) + 'Assuming part1=EFI, part2=Boot, part3=Root and part4=Home')
	return partitions
			
def disk_setup(term, position):
	global NVME0N1, SDA, VDA, SYSTEMDISK, ERASEDISK, FORMAT_EFI, FORMAT_BOOT, FORMAT_ROOT, FORMAT_HOME, FORMAT_HOME3
	
	SYSTEMDISK = ''
	ERASEDISK = FORMAT_EFI = FORMAT_BOOT = FORMAT_ROOT = FORMAT_HOME = FORMAT_HOME3 = False
	select_item = '0'
	select_items = list(('0'))
	
	text = text_justify_center(term, position, DISK_SETUP_WELCOME)
	print(term.bold(term.gray_on_blue(text)))

	position = resolve_uw_display(term,1)
	if NVME0N1 or SDA or VDA:
		if NVME0N1:	
			text = text_justify_left(term, position, 'Accept '+term.bold('/dev/nvme0n1')+' as the system disk?')
		if SDA:	
			text = text_justify_left(term, position, 'Accept '+term.bold('/dev/sda')+' as the system disk?')
		if VDA:	
			text = text_justify_left(term, position, 'Accept '+term.bold('/dev/vda')+' as the system disk?')
	else:
		text = text_justify_left(term, position, 'No default disk detected, abort?')
	print(text)

	position[1] = position[1]+term.length(text)+2
	select_item=choices_horizontal_menu(term, position,YES_OR_NO)

	if select_item!='0':
		if select_item==YES_OR_NO[1]:
			position = resolve_uw_display(term)
			choose_disk(term, position)
		else:
			if NVME0N1:	
				SYSTEMDISK = '/dev/nvme0n1'
			if SDA:	
				SYSTEMDISK = '/dev/sda'
			if VDA:	
				SYSTEMDISK = '/dev/vda'
		
		partitions = enumerate_partitions(term)
		if partitions <=2:
			position = resolve_uw_display(term)
			position[0]-=1
			position[1]= position[1] + (len('Setup system to use entire disk - Two partitions EFI/Root.') + 3)
			select_item=choices_horizontal_menu(term, position,PROCEED_OR_ABORT)
			if select_item == PROCEED_OR_ABORT[0]:
				ERASEDISK = True
				FORMAT_EFI = True
				FORMAT_ROOT = True
			else:
				select_item = '0'
		else:
			match partitions:
				case 3:
					position = resolve_uw_display(term,1)
					select_items = choices_multiple_options(term, position, DISK_OPTIONS3)
					if  DISK_OPTIONS3[0] in select_items:
						FORMAT_EFI = True
					if  DISK_OPTIONS3[1] in select_items:
						FORMAT_ROOT = True
					if  DISK_OPTIONS3[2] in select_items:
						FORMAT_HOME3 = True
					if  DISK_OPTIONS3[3] in select_items:
						ERASEDISK = True
						FORMAT_EFI = True
						FORMAT_ROOT = True
						FORMAT_HOME3 = False
				case 4:
					position = resolve_uw_display(term,1)
					select_items = choices_multiple_options(term, position, DISK_OPTIONS4)
					if  DISK_OPTIONS4[0] in select_items:
						FORMAT_EFI = True
					if  DISK_OPTIONS4[1] in select_items:
						FORMAT_BOOT = True
					if  DISK_OPTIONS4[2] in select_items:
						FORMAT_ROOT = True
					if  DISK_OPTIONS4[3] in select_items:
						FORMAT_HOME = True
					if  DISK_OPTIONS3[3] in select_items:
						ERASEDISK = True
						FORMAT_EFI = True
						FORMAT_ROOT = True
						FORMAT_BOOT = False
						FORMAT_HOME = False
				case _:
					select_items = choices_multiple_options(term, position, DISK_OPTIONS4)
					if  DISK_OPTIONS4[0] in select_items:
						FORMAT_EFI = True
					if  DISK_OPTIONS4[1] in select_items:
						FORMAT_BOOT = True
					if  DISK_OPTIONS4[2] in select_items:
						FORMAT_ROOT = True
					if  DISK_OPTIONS4[3] in select_items:
						FORMAT_HOME = True
					if  DISK_OPTIONS3[3] in select_items:
						ERASEDISK = True
						FORMAT_EFI = True
						FORMAT_ROOT = True
						FORMAT_BOOT = False
						FORMAT_HOME = False
	if select_items =='0':
		return False
	else:
		return True

def list_timezones():
	timez = subprocess.run(['sh','-c','timedatectl list-timezones'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	timez_lines = timez.stdout.decode('utf-8').splitlines()
	return timez_lines

def list_keymaps():
	keymaps = subprocess.run(['sh','-c','localectl list-keymaps'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	keymaps_lines = keymaps.stdout.decode('utf-8').splitlines()
	return keymaps_lines

def list_locales():
	locales = subprocess.run(['sh','-c','cat '+os.path.dirname(__file__)+'/misc/locale-list.dat'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	locales_lines = locales.stdout.decode('utf-8').splitlines()
	return locales_lines	

def set_usename(term,position):
	global USERNAME
	global DISPLAY_USERNAME

	USERNAME = input(term.move_yx(position[0],position[1]) + 'Enter username: '+term.clear_eos())
	USERNAME = USERNAME.lower()
	DISPLAY_USERNAME = input(term.move_yx(position[0]+1,position[1]) + 'Enter display name: ')
	pass

def set_hostname(term,position):
	global HOSTNAME

	HOSTNAME = input(term.move_yx(position[0],position[1]) + 'Enter new hostname: '+term.clear_eos())
	HOSTNAME = HOSTNAME.lower()
	pass
	
def set_locale(term,position):
	global LANG
	LOCAL_LANG = choices_single_option(term, position, list_locales(), 'Choose your locale: '+term.clear_eos())
	if LOCAL_LANG != '0':
		LANG = LOCAL_LANG
	pass

def set_timezone(term,position):
	global TIME_ZONE
	LOCAL_TIME_ZONE = choices_single_option(term, position, list_timezones(), 'Choose your timezone: '+term.clear_eos())
	if LOCAL_TIME_ZONE != '0':
		TIME_ZONE = LOCAL_TIME_ZONE
	pass	

def set_password(term, position):
	global PASSWORD0
	PASSWORD0 = 0
	PASSWORD1 = 1
	
	while PASSWORD0!=PASSWORD1:	
		print(term.move_yx(position[0],position[1]) + 'Defining root and '+ USERNAME + ' with the same password.' + term.clear_eos())
		PASSWORD0=getpass.getpass(term.move_yx(position[0]+2,position[1]) + 'Enter '+ USERNAME +'/root password: '+term.clear_eos())
		PASSWORD1=getpass.getpass(term.move_yx(position[0]+3,position[1]) + 'Confirm password: '+term.clear_eos())
		if PASSWORD0!=PASSWORD1:
			print(term.move_yx(position[0]+2,position[1]) + term.bold('Passwords do not match! Press any key to continue...')+term.clear_eos())
			with term.cbreak(), term.hidden_cursor():
				key = term.inkey()
		else:
			if PASSWORD0 == '':
				print(term.move_yx(position[0]+2,position[1]) + term.bold('Empty password not allowed! Press any key to continue...')+term.clear_eos())
				PASSWORD1 = '1'
				with term.cbreak(), term.hidden_cursor():
					key = term.inkey()
	pass

def set_keyboard(term,position):
	global KEYBOARD_CONFIG
	LOCAL_KEYBOARD_CONFIG = choices_single_option(term, position, list_keymaps(), 'Choose your keymap: '+term.clear_eos())
	if LOCAL_KEYBOARD_CONFIG != '0':
		KEYBOARD_CONFIG = LOCAL_KEYBOARD_CONFIG
	pass	

def user_info(term, position):
	finish = True
	global LANG, USERNAME, DISPLAY_USERNAME, HOSTNAME, TIME_ZONE, KEYBOARD_CONFIG

	USER_INFO_OPTIONS =['Change username and display name.',
						'Change hostname.',
						'Change system language.',
						'Change time zone.',
						'Change keyboard config.']

	selected_items = list(('0'))
	
	position = resolve_uw_display(term,1)
	preserv_position = position
	while finish:
		USER_INFO=[term.bold(SYSTEM) + ' - Pre-selected options',
				   ' ',
				   'Main user: ' + USERNAME,
				   'Display name: ' + DISPLAY_USERNAME,
				   'Hostname: ' + HOSTNAME,
				   'System locale: ' + LANG,
				   'Time Zone: ' + TIME_ZONE,
				   'Keyboard config: ' + KEYBOARD_CONFIG]
		
		position = preserv_position
		text_print_list(term, position, USER_INFO)
		position = resolve_uw_display(term,1)
		selected_item = choices_horizontal_menu(term, position, YES_OR_NO, 'Accept this?')
		if selected_item == YES_OR_NO[1]:
			position = resolve_uw_display(term,1)
			selected_items=choices_multiple_options(term, position, USER_INFO_OPTIONS, 'Multiple selections - Choose what you like to modify:')
			if selected_items[0] != '0':
				print(term.move_yx(position[0],position[1])+term.clear_eos())
				for idx, item_line in enumerate(selected_items):
					if item_line==USER_INFO_OPTIONS[0]:
						set_usename(term, position)
					if item_line==USER_INFO_OPTIONS[1]:
						set_hostname(term, position)
					if item_line==USER_INFO_OPTIONS[2]:
						set_locale(term, position)
					if item_line==USER_INFO_OPTIONS[3]:
						set_timezone(term, position)
					if item_line==USER_INFO_OPTIONS[4]:
						set_keyboard(term, position)
				position = preserv_position
			else:
				finish = True
				return False
		else:
			if selected_item == YES_OR_NO[0]:
				position = resolve_uw_display(term,1)
				set_password(term, position)
				finish = True
				return True
			else:
				finish = True
				return False

def set_msfonts():
	MSFONTS_PATH = '/mnt/usr/share/fonts/WindowsFonts'
	MSFONTS_FILE = PATH + 'assets/msfonts.7z.001'
	
	try:
		os.makedirs(MSFONTS_PATH)
		print(f"Nested directories '{MSFONTS_PATH}' created successfully.")
	except FileExistsError:
		print(f"One or more directories in '{MSFONTS_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{MSFONTS_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")
	subprocess.run(['sh', '-c','7z e ' + MSFONTS_FILE + ' -o' + MSFONTS_PATH + '/'])
	subprocess.run(['sh', '-c','arch-chroot /mnt fish -c \'chmod 644 ' + MSFONTS_PATH + '/*\''])
	subprocess.run(['sh', '-c','arch-chroot /mnt fc-cache –force'])
	pass 

def set_telaicons():
	TELAICONS_PATH = '/mnt/home/' + USERNAME + '/.local/share/icons'
	TELAICONS_FILE = PATH + 'assets/telaicons.7z'

	try:
		os.makedirs(TELAICONS_PATH)
		print(f"Nested directories '{TELAICONS_PATH}' created successfully.")
	except FileExistsError:
		print(f"One or more directories in '{TELAICONS_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{TELAICONS_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")
	subprocess.run(['sh', '-c','7z x ' + TELAICONS_FILE + ' -o' + TELAICONS_PATH + '/'])
	pass 

def set_alacritty():
	ALACRITTY_PATH = '/mnt/home/' + USERNAME + '/.config/alacritty'
	ALACRITTY_FILE = PATH + 'assets/alacritty.toml'
	
	if EXTRAS == True:
		try:
			os.makedirs(ALACRITTY_PATH)
			print(f"Nested directories '{ALACRITTY_PATH}' created successfully.")
		except FileExistsError:
			print(f"One or more directories in '{ALACRITTY_PATH}' already exist.")
		except PermissionError:
			print(f"Permission denied: Unable to create '{ALACRITTY_PATH}'.")
		except Exception as e:
			print(f"An error occurred: {e}")
		subprocess.run(['sh', '-c','cp -v ' + ALACRITTY_FILE + ' ' + ALACRITTY_PATH + '/'])
	pass
	
def set_fish_functions():
	FISH_FUNCTIONS_PATH = '/mnt/home/' + USERNAME + '/.config/fish/functions'
	FISH_FUNCTIONS_FILES = 'assets/functions/*'
	
	try:
		os.makedirs(FISH_FUNCTIONS_PATH)
		print(f"Nested directories '{FISH_FUNCTIONS_PATH}' created successfully.")
	except FileExistsError:
		print(f"One or more directories in '{FISH_FUNCTIONS_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{FISH_FUNCTIONS_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")
	subprocess.run(['sh', '-c','cp -v ' + PATH + FISH_FUNCTIONS_FILES + ' ' + FISH_FUNCTIONS_PATH + '/'])
	subprocess.run(['sh', '-c','arch-chroot /mnt fish -c \'chown -Rv ' + USERNAME + ':users /home/' + USERNAME + '/{\'\',\'.\'}*\''])
	pass 

def set_plymouth():
	PLYTMOUTH_THEME_PATH = '/mnt/usr/share/plymouth/themes/PoweredByArch'
	PLYTMOUTH_THEME_FILES = 'assets/PoweredByArch/*'
	PLYTMOUTH_CONF = 'assets/plymouthd.conf'
	PLYTMOUTH_CONF_PATH = '/mnt/etc/plymouth'
	
	try:
		os.makedirs(PLYTMOUTH_THEME_PATH)
		print(f"Nested directories '{PLYTMOUTH_THEME_PATH}' created successfully.")
	except FileExistsError:
		print(f"One or more directories in '{PLYTMOUTH_THEME_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{PLYTMOUTH_THEME_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")

	try:
		os.makedirs(PLYTMOUTH_CONF_PATH)
		print(f"Nested directories '{PLYTMOUTH_CONF_PATH}' created successfully.")
	except FileExistsError:
		print(f"One or more directories in '{PLYTMOUTH_CONF_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{PLYTMOUTH_CONF_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")

	subprocess.run(['sh', '-c','cp -Rv ' + PATH + PLYTMOUTH_THEME_FILES + ' ' + PLYTMOUTH_THEME_PATH + '/'])
	subprocess.run(['sh', '-c','cp -v ' + PATH + PLYTMOUTH_CONF + ' ' + PLYTMOUTH_CONF_PATH + '/'])
	subprocess.run(['sh', '-c','arch-chroot /mnt mkinitcpio -P'])
	pass 

def system_options(term, position, SYSTEM_OPTIONS):
	global LTS, ZEN, MESA, NVIDIA, GNOME_BASIC, PLASMA_BASIC, CHROMIUM, FIREFOX, THUNDERBIRD, LIBREOFFICE, VLC, GEANY, CONKY, EXTRAS
	
	LTS = ZEN = MESA = NVIDIA = GNOME_BASIC = PLASMA_BASIC = CHROMIUM = FIREFOX = THUNDERBIRD = LIBREOFFICE = VLC = GEANY = CONKY = EXTRAS = False

	finish =  True
	selected_items = list(('0'))
	
	position = resolve_uw_display(term,1)
	preserv_position = position
	
	choices_set_options_limit(term, 30)
	
	DEFAULT_OPTIONS = ['ZEN Kernel',
					  'Mesa combo - For systems with GPUs/iGPUS AMD or Intel',
					  'GNOME Basic - Minimal options - file manager, terminal, tweaks...',
					  'Internet Browser - Firefox browser',
					  'Video Player - VLC',
					  'Text Editor - Geany and plugins',
					  'System Monitor - Conky',
					  'Usefull extras - p7zip, btop and yt-dlp']

	while finish:
		position = preserv_position
		selected_items=choices_multiple_options(term, position, SYSTEM_OPTIONS, 'Choose your system components:', DEFAULT_OPTIONS)
		if selected_items != '0':
			if (SYSTEM_OPTIONS[2] in selected_items and SYSTEM_OPTIONS[3] in selected_items) or (SYSTEM_OPTIONS[4] in selected_items and SYSTEM_OPTIONS[5] in selected_items):
				print(term.move_yx(position[0]+len(SYSTEM_OPTIONS)+3, position[1]) + 'Mesa/NVidia or Gnome/Plasma are mutual excludents, press any key to return to select options.')
				with term.cbreak(), term.hidden_cursor():
					key = term.inkey()	
			else:
				if SYSTEM_OPTIONS[0] in selected_items:
					LTS = True
				if SYSTEM_OPTIONS[1] in selected_items:
					ZEN = True
				if SYSTEM_OPTIONS[2] in selected_items:
					MESA = True
				if SYSTEM_OPTIONS[3] in selected_items:
					NVIDIA = True
				if SYSTEM_OPTIONS[4] in selected_items:
					GNOME_BASIC = True
				if SYSTEM_OPTIONS[5] in selected_items:
					PLASMA_BASIC = True
				if SYSTEM_OPTIONS[6] in selected_items:
					CHROMIUM = True
				if SYSTEM_OPTIONS[7] in selected_items:
					FIREFOX = True
				if SYSTEM_OPTIONS[8] in selected_items:
					THUNDERBIRD = True
				if SYSTEM_OPTIONS[9] in selected_items:
					LIBREOFFICE = True
				if SYSTEM_OPTIONS[10] in selected_items:
					VLC = True
				if SYSTEM_OPTIONS[11] in selected_items:
					GEANY = True
				if SYSTEM_OPTIONS[12] in selected_items:
					CONKY = True
				if SYSTEM_OPTIONS[13] in selected_items:
					EXTRAS = True
				finish =  False
				return True

def confirm_options(term, position):
	USER_INFO=['Main user: ' + USERNAME,
		       'Display name: ' + DISPLAY_USERNAME,
		       'Hostname: ' + HOSTNAME,
		       'System locale: ' + LANG,
		       'Time Zone: ' + TIME_ZONE,
		       'Keyboard config: ' + KEYBOARD_CONFIG]
	
	DISK_PARAMETERS=['System Disk: ' + SYSTEMDISK,
					 'Erase disk: ' + str(ERASEDISK),
					 'Format EFI:'  + str(FORMAT_EFI),
					 'Format Boot:'  + str(FORMAT_BOOT),
					 'Format Root:'  + str(FORMAT_ROOT),
					 'Format Home:'  + str(FORMAT_HOME),   
					 'Format Home3:'  + str(FORMAT_HOME3)]

	SELECTED_PACKAGES=['Kernel LTS: ' + str(LTS),
					   'Kernel ZEN: ' + str(ZEN),
					   'Combo Mesa: ' + str(MESA),
					   'Combo NVIDIA: ' + str(NVIDIA),
					   'Gnome: ' + str(GNOME_BASIC),
					   'Plasma: ' + str(PLASMA_BASIC),
					   'CHROMIUM: ' + str(CHROMIUM),
					   'Firefox: ' + str(FIREFOX),
					   'Thunderbird: ' + str(THUNDERBIRD),
					   'Libreoffice: ' + str(LIBREOFFICE),
					   'VLC: ' + str(VLC),
					   'Geany: ' + str(GEANY),
					   'Conky: ' + str(CONKY),
					   'Extras: ' + str(EXTRAS)]

	position = resolve_uw_display(term,1)
	text_print_list(term, position, USER_INFO)

	position = resolve_uw_display(term,1)
	text_print_list(term, position, DISK_PARAMETERS)

	position = resolve_uw_display(term,1)
	text_print_list(term, position, SELECTED_PACKAGES)

	return True

def prepare_disk(term):
	create_gpt_label = create_efi_partition = create_root_partition = format_efi = format_boot = format_root = format_home = '0'
	mount_root = mount_boot = mount_efi = mount_home = mkdir_boot = mkdir_efi = mkdir_home = mkswapfile = swapon = '0'

	term.move_yx(4,0)
	term.clear_eos()
	
	if SYSTEMDISK.find('nvme') == -1:
		if FORMAT_HOME3 == False:
			efi_number = '1'
			boot_number = '2'
			root_number = '3'
			home_number = '4'
		else:
			efi_number = '1'
			root_number = '2'
			home_number = '3'
	else:
		if FORMAT_HOME3 == False:						
			efi_number = 'p1'
			boot_number = 'p2'
			root_number = 'p3'
			home_number = 'p4'
		else:
			efi_number = 'p1'
			root_number = 'p2'
			home_number = 'p3'
	if ERASEDISK:
		if SYSTEMDISK.find('nvme') == -1:
			efi_number = '1'
			root_number = '2'
		else:						
			efi_number = 'p1'
			root_number = 'p2'
		create_gpt_label      = 'parted -s --align optimal ' + SYSTEMDISK + ' mklabel gpt'
		create_efi_partition  = 'parted -s --align optimal ' + SYSTEMDISK + ' mkpart PRIMARY fat32 0% 650M'
		create_root_partition = 'parted -s --align optimal ' + SYSTEMDISK + ' mkpart PRIMARY ext4 650M 100%'
		format_efi            = 'mkfs.fat -F32 -n EFI ' + SYSTEMDISK + efi_number
		format_root           = 'mkfs.ext4 -F -L Root ' + SYSTEMDISK + root_number
		mount_root            = 'mount ' + SYSTEMDISK + root_number + ' /mnt'
		mkdir_efi             = 'mkdir -p /mnt/boot/efi'
		mount_efi             = 'mount ' + SYSTEMDISK + efi_number + ' /mnt/boot/efi'
	else:
		if FORMAT_EFI:
			format_efi = 'mkfs.fat -F32 -n EFI ' + SYSTEMDISK + efi_number
		if FORMAT_BOOT:
			format_boot = 'mkfs.ext4 -F -L Boot ' + SYSTEMDISK + boot_number
		if FORMAT_ROOT:
			format_root = 'mkfs.ext4 -F -L Root ' + SYSTEMDISK + root_number
		if FORMAT_HOME or FORMAT_HOME3:
			format_home = 'mkfs.ext4 -F -L Home ' + SYSTEMDISK + home_number
		mount_root = 'mount ' + SYSTEMDISK + root_number + ' /mnt'			
		if FORMAT_HOME3 ==  False:
			mkdir_boot = 'mkdir /mnt/boot'
			mount_boot = 'mount ' + SYSTEMDISK + boot_number + ' /mnt/boot'
		mkdir_efi  = 'mkdir -p /mnt/boot/efi'
		mount_efi  = 'mount ' + SYSTEMDISK + efi_number + ' /mnt/boot/efi'
		mkdir_home = 'mkdir /mnt/home'
		mount_home = 'mount ' + SYSTEMDISK + home_number + ' /mnt/home'

	mkswapfile = 'mkswap -U clear --size ' + MEM + ' --file /mnt/swapfile'
	swapon     = 'swapon /mnt/swapfile'

	for command_to_run in [create_gpt_label, create_efi_partition, create_root_partition, format_efi, format_boot, format_root, format_home, mount_root, mkdir_boot, mount_boot, mkdir_efi, mount_efi, mkdir_home, mount_home, mkswapfile, swapon]:
		if command_to_run != '0':
			subprocess.run(['sh','-c', command_to_run])
 
	x = time.localtime()
	sufix = str(x.tm_year)+'.'+str(x.tm_mon)+'.'+str(x.tm_mday)+'.'+str(x.tm_hour)+str(x.tm_min)

	if os.path.isdir('/mnt/home/'+USERNAME): # Checks the existence of user home folder and rename it
		print(os.path.isdir('/mnt/home/'+USERNAME), '/mnt/home/'+USERNAME)
		subprocess.run(['sh','-c','mv -v /mnt/home/' + USERNAME + ' /mnt/home/'+USERNAME+'.'+sufix])
	return True

def read_files(file_name):
	try:
		file = open(PATH+file_name)
		packages = ''
		for package in file:
			if packages == '':
				packages = package.replace('\n','')
			else:
				packages = packages + ' ' + package.replace('\n','')
		file.close()
		return packages
	except Exception:
		packages = '0'
		return packages

def run_reflector():
	REFLECTOR = 'reflector --latest 10 --sort rate --save /etc/pacman.d/mirrorlist'
	print('\nPlease wait.\n\nUpdating mirrorlist with reflector...\n(May take a while and is safe to ignore warnings)\n')
	subprocess.run(['sh','-c', REFLECTOR])

def prepare_chroot():
	file_name = 'misc/pacstrap.dat'
	PACSTRAP = list(('0'))
	
	packages = read_files(file_name)
	if packages != '0':
		run_reflector() # Update mirrors
		PACSTRAP[0] = 'pacstrap /mnt '+packages
		PACSTRAP.append('genfstab -U -p /mnt >> /mnt/etc/fstab')
		return PACSTRAP

def set_pacman(): # Execute before arch-chroot - Enable multilib, parallel downloads and fancy apearence on pacman 
	subprocess.run(['sh', '-c','sh ' + PATH + 'scripts/pacman-conf.sh'])
	pass
	
def chroot_packages():
	PACKAGES = ''

	if PACKAGES == '':
		PACKAGES = read_files('misc/base.dat')
	else:				
		PACKAGES_SWAP = read_files('misc/base.dat')
		PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP	
	
	if LTS == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/lts.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/lts.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if ZEN == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/zen.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/zen.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if MESA == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/mesa.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/mesa.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if NVIDIA == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/nvidia.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/nvidia.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if GNOME_BASIC == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/gnome-basic.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/gnome-basic.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if PLASMA_BASIC == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/plasma-basic.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/plasma-basic.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if CHROMIUM == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/chromium.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/chromium.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if FIREFOX == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/firefox.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/firefox.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if THUNDERBIRD == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/thunderbird.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/thunderbird.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if LIBREOFFICE == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/libreoffice.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/libreoffice.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if VLC == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/vlc.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/vlc.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if GEANY == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/geany.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/geany.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if CONKY == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/conky.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/conky.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	if EXTRAS == True:
		if PACKAGES == '':
			PACKAGES = read_files('misc/extras.dat')
		else:				
			PACKAGES_SWAP = read_files('misc/extras.dat')
			PACKAGES = PACKAGES + ' ' + PACKAGES_SWAP
	subprocess.run(['sh', '-c','cp -v /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist'])
	subprocess.run(['sh', '-c','arch-chroot /mnt pacman -Sy --noconfirm --needed ' + PACKAGES])
	pass 

def set_regional_settings():
	subprocess.run(['sh', '-c','arch-chroot /mnt ln -sf /usr/share/zoneinfo/' + TIME_ZONE + ' /etc/localtime'])
	subprocess.run(['sh', '-c','arch-chroot /mnt timedatectl set-ntp 1'])
	subprocess.run(['sh', '-c','arch-chroot /mnt timedatectl set-timezone ' + TIME_ZONE])
	subprocess.run(['sh', '-c','arch-chroot /mnt sed -i s/#pt_BR.UTF-8/pt_BR.UTF-8/g /etc/locale.gen'])
	subprocess.run(['sh', '-c','arch-chroot /mnt sed -i s/#' + LANG + '/' + LANG + '/g /etc/locale.gen'])
	subprocess.run(['sh', '-c','arch-chroot /mnt locale-gen'])
	subprocess.run(['sh', '-c','echo LANG=' + LANG + ' >> /mnt/etc/locale.conf'])
	subprocess.run(['sh', '-c','localectl set-keymap ' + KEYBOARD_CONFIG])
	subprocess.run(['sh', '-c','cp -v /etc/vconsole.conf /mnt/etc/vconsole.conf'])
		
	if KEYBOARD_CONFIG == 'us-acentos':
		subprocess.run(['sh', '-c','echo "GTK_IM_MODULE=cedilla\nQT_IM_MODULE=cedilla" >> /mnt/etc/environment'])
	pass 

def set_hosts_files(): # Set hostname and config hosts file
	SAMPLE_HOSTS = 'assets/hosts.txt'
	HOSTS_FILE   = '/mnt/etc/hosts'

	try:
		subprocess.run(['sh', '-c','echo ' + HOSTNAME + ' > /mnt/etc/hostname'])
		
		sample_hosts = open(PATH+SAMPLE_HOSTS)
		hosts_file = open(HOSTS_FILE, 'a')
		for idx, line in enumerate(sample_hosts.readlines()):
			if line.find('#HOSTNAME') == 1:
				hosts_file.write(line.replace('#HOSTNAME',HOSTNAME))
			else:
				hosts_file.write(line)
		sample_hosts.close()
		hosts_file.close()
		return True		
	except Exception:
		return False	
     
def set_pass(): # Create main user and set root password
	subprocess.run(['sh', '-c','arch-chroot /mnt useradd -m -g users -G wheel -c \'' + DISPLAY_USERNAME + '\' -s /usr/bin/fish -d /home/' + USERNAME + ' '+ USERNAME])
	subprocess.run(['sh', '-c','mkdir /mnt/home/' + USERNAME + '/ArchInstall'])
	subprocess.run(['sh', '-c','cp -Rv ' + os.path.dirname(__file__) + '/* /mnt/home/' + USERNAME + '/ArchInstall/'])
	subprocess.run(['sh', '-c','arch-chroot /mnt sh /home/' + USERNAME + '/ArchInstall/scripts/setpass.sh \''+PASSWORD0+'\' '+USERNAME])
	print('Press any key')
	pass
	
def set_bootloader():
	subprocess.run(['sh', '-c','arch-chroot /mnt sh /home/' + USERNAME + '/ArchInstall/scripts/mkgrub.sh'])
	pass

def set_daemons():
	STRING1 = '#AddressFamily any'
	STRING2 = 'AddressFamily inet'
	subprocess.run(['sh', '-c','sed -i \'s/' + STRING1 + '/' + STRING2 + '/g\' /mnt/etc/ssh/sshd_config'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable NetworkManager'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable sshd'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable bluetooth'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable cronie'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable ModemManager'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable tuned'])
	subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable tuned-ppd'])
	
	if GNOME_BASIC == True:
		subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable gdm'])
	if PLASMA_BASIC == True:
		subprocess.run(['sh', '-c','arch-chroot /mnt systemctl enable sddm'])
	pass 

def set_second_autostart():
	AUTOSTART_PATH = '/mnt/home/' + USERNAME + '/.config/autostart'
	AUTOSTART_FILE = AUTOSTART_PATH + '/second.desktop'
	SECOND_DESKTOP = ['[Desktop Entry]\n',
					  'Exec=gnome-terminal --geometry=90x40 -- /home/' + USERNAME + '/ArchInstall/second && exit\n',
					  'Icon=application-x-shellscript\n',
					  'Name=Teste Autostart\n',
					  'Terminal=false\n',
					  'Type=Application\n',
					  'X-KDE-AutostartScript=true\n' ]
	try:
		os.makedirs(AUTOSTART_PATH)
		print(f"Nested directories '{AUTOSTART_PATH}' created successfully.")
		with OPEN(AUTOSTART_FILE, 'a') as FILE:
			for i, line in enumerate(SECOND_DESKTOP):
				FILE.writelines(line)
	except FileExistsError:
		print(f"One or more directories in '{AUTOSTART_PATH}' already exist.")
	except PermissionError:
		print(f"Permission denied: Unable to create '{AUTOSTART_PATH}'.")
	except Exception as e:
		print(f"An error occurred: {e}")
	subprocess.run(['sh', '-c','cp -v ' + AUTOSTART_FILE + ' ' + AUTOSTART_PATH + '/'])
	pass 
   
def main():
	STEP = 1
	position = list((0,0))

	term = blessed.Terminal()
	text_set_printable_area(term, PRINTABLE_AREA) # Define the usable area of screen (columns)
	
	initial_args(sys.argv)
		 
	with term.fullscreen():
		try:
			while True:
				match STEP:
					case 1: # Print inital statements and disk setup step
						permanent_title(term, PROGRAM_TITLE) # Set the header with PROGRAM_TITLE text
						position = resolve_uw_display(term)
						text_print_list(term, position, WELCOME_TEXT)
						
						position = resolve_uw_display(term)
						step_title = text_justify_center(term, position, 'System Info')
						print(term.bold(term.gray_on_blue(step_title)))
						position = resolve_uw_display(term)
						position = sysinfo(term, position)
						if disk_setup(term, position):
							STEP+=1
					case 2:
						permanent_title(term, PROGRAM_TITLE) # usa a função que segura o cabeçalho do terminal
						position = resolve_uw_display(term,-1)
						step_title = text_justify_center(term, position, 'Moment 1 - Config user and Regional Settings')
						print(term.bold(term.gray_on_blue(step_title)))
						if user_info(term, position):
							STEP+=1
						else:
							STEP-=1
					case 3:
						permanent_title(term, PROGRAM_TITLE) # usa a função que segura o cabeçalho do terminal
						position = resolve_uw_display(term,-1)
						step_title = text_justify_center(term, position, 'Moment 1 - Define system setup options')
						print(term.bold(term.gray_on_blue(step_title)))
						if system_options(term, position, SYSTEM_OPTIONS):
							STEP+=1
						else:
							STEP-=1
					case 4:
						permanent_title(term, PROGRAM_TITLE) # usa a função que segura o cabeçalho do terminal
						position = resolve_uw_display(term,-1)
						permanent_position=position
						step_title = text_justify_center(term, position, 'Moment 1 - Revise Options')
						print(term.bold(term.gray_on_blue(step_title)))
						if confirm_options(term, position):
							STEP+=1
						else:
							STEP-=1
					case 5:
						position = resolve_uw_display(term,2)
						proceed_or_abort = choices_horizontal_menu(term, position, PROCEED_OR_ABORT, term.blink(term.bold('WARNING!!! Next step will detroy all data on ' + SYSTEMDISK)) + term.clear_eos())
						if proceed_or_abort == PROCEED_OR_ABORT[0]:
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Configuring storage')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							prepare_disk(term)
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Executing pacstrap')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							PACSTRAP = prepare_chroot()
							for idx, command_to_run in enumerate(PACSTRAP):
								subprocess.run(['sh','-c', command_to_run]) # PACSTRAP and GENFSTAB
							set_sagittarius_fstab() # Function exclusive to Renata's desktop PC
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Configuring pacman')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_pacman()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Installing packages')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							chroot_packages()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Configuring hosts and hostname files')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_hosts_files()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Configuring language, keyboard and timezone')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_regional_settings()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Creating user')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_pass()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Configuring grub')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_bootloader()
							step_title = text_justify_center(term, permanent_position, 'Moment 2 - Finishing configuration')
							print(term.bold(term.gray_on_blue(step_title))+term.clear_eos())
							set_daemons()
							set_alacritty()
							set_msfonts()
							set_telaicons()
							set_plymouth()
							set_second_autostart()
							set_fish_functions() # This function set home folder permissions - need to be the last one
							print('\nSetup finished...\n\nPress any key...\n\n')
							with term.cbreak(), term.hidden_cursor():
								key = term.inkey()
							STEP+=1
					case _:
						break
		except KeyboardInterrupt:
			print('')
			exit(0)

if __name__ == "__main__":
    main()
